{
  "address": "0x77158da68347F087c7FBEE065249cf4867A2e7d3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NewBribe",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        }
      ],
      "name": "NewDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "NewFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeAddress",
          "type": "address"
        }
      ],
      "name": "NewFeeAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "NewProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferredBribe",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositBribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposal",
          "type": "address"
        }
      ],
      "name": "depositBribe",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proposalDeadlines",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "setDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "setFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "transferBribesToDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "proposals",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "deadlines",
          "type": "uint256[]"
        }
      ],
      "name": "updateProposals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2515cc37219c66ddda39fd2c58ce2eef574b62dab6b684a9e8ad053122ac643d",
  "receipt": {
    "to": null,
    "from": "0x079470B1457361428A8C54E5FeD52E481cc67C32",
    "contractAddress": "0x77158da68347F087c7FBEE065249cf4867A2e7d3",
    "transactionIndex": 295,
    "gasUsed": "1526430",
    "logsBloom": "0x0000000400000000000000000000000000000000000000000000000000000000040000000000040000000000000000000000c000000000400000000000000000000000000000000000000000400000000000000000000000000000000000000000001000021000000000000000000800000000000000000000000040000000100001000000000000000000000000000000000000000000000000000000010040000000000000000000010000010000000000000000000000001000000004000000000000400000000000000000000000000000000000000100000000000020000000000000000000000000000000000000000000000000000000000000000080",
    "blockHash": "0x80e0b243f256cc3a7c5d2f10376bb69bdb9e6fb1c0db0867927fcbffb69040cb",
    "transactionHash": "0x2515cc37219c66ddda39fd2c58ce2eef574b62dab6b684a9e8ad053122ac643d",
    "logs": [
      {
        "transactionIndex": 295,
        "blockNumber": 13554860,
        "transactionHash": "0x2515cc37219c66ddda39fd2c58ce2eef574b62dab6b684a9e8ad053122ac643d",
        "address": "0x77158da68347F087c7FBEE065249cf4867A2e7d3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000079470b1457361428a8c54e5fed52e481cc67c32",
          "0x000000000000000000000000079470b1457361428a8c54e5fed52e481cc67c32"
        ],
        "data": "0x",
        "logIndex": 385,
        "blockHash": "0x80e0b243f256cc3a7c5d2f10376bb69bdb9e6fb1c0db0867927fcbffb69040cb"
      },
      {
        "transactionIndex": 295,
        "blockNumber": 13554860,
        "transactionHash": "0x2515cc37219c66ddda39fd2c58ce2eef574b62dab6b684a9e8ad053122ac643d",
        "address": "0x77158da68347F087c7FBEE065249cf4867A2e7d3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b33",
          "0x000000000000000000000000079470b1457361428a8c54e5fed52e481cc67c32",
          "0x000000000000000000000000079470b1457361428a8c54e5fed52e481cc67c32"
        ],
        "data": "0x",
        "logIndex": 386,
        "blockHash": "0x80e0b243f256cc3a7c5d2f10376bb69bdb9e6fb1c0db0867927fcbffb69040cb"
      },
      {
        "transactionIndex": 295,
        "blockNumber": 13554860,
        "transactionHash": "0x2515cc37219c66ddda39fd2c58ce2eef574b62dab6b684a9e8ad053122ac643d",
        "address": "0x77158da68347F087c7FBEE065249cf4867A2e7d3",
        "topics": [
          "0x63fe946ed58429ac3c5e64d4356ff92c26d7fa1e73586515df8ba9f059ab54a5",
          "0x00000000000000000000000000000000000000000000000000000000000001f4"
        ],
        "data": "0x",
        "logIndex": 387,
        "blockHash": "0x80e0b243f256cc3a7c5d2f10376bb69bdb9e6fb1c0db0867927fcbffb69040cb"
      },
      {
        "transactionIndex": 295,
        "blockNumber": 13554860,
        "transactionHash": "0x2515cc37219c66ddda39fd2c58ce2eef574b62dab6b684a9e8ad053122ac643d",
        "address": "0x77158da68347F087c7FBEE065249cf4867A2e7d3",
        "topics": [
          "0xdcff558177ef1322e1a9308bd0d2b8b3922d8e05c3ec06323297bdd24db93ef0",
          "0x000000000000000000000000079470b1457361428a8c54e5fed52e481cc67c32"
        ],
        "data": "0x",
        "logIndex": 388,
        "blockHash": "0x80e0b243f256cc3a7c5d2f10376bb69bdb9e6fb1c0db0867927fcbffb69040cb"
      }
    ],
    "blockNumber": 13554860,
    "cumulativeGasUsed": "18023899",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"],
  "solcInputHash": "f11050518f5ea1cca811029dda16a9ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewBribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"NewDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"NewFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"NewFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferredBribe\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositBribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"depositBribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposalDeadlines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"transferBribesToDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"proposals\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deadlines\",\"type\":\"uint256[]\"}],\"name\":\"updateProposals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotemakBribe.sol\":\"VotemakBribe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/VotemakBribe.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IWETH9 } from \\\"./interfaces/IWETH9.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract VotemakBribe is AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable weth;\\n    uint256 public fee;\\n    address public feeAddress;\\n    address public distributor;\\n    mapping(address => uint256) public proposalDeadlines;\\n    uint256 internal constant MAX_FEE = 1e4;\\n    bytes32 internal constant TEAM_ROLE = keccak256(\\\"TEAM_ROLE\\\");\\n\\n    constructor(address _weth) {\\n        weth = _weth;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(TEAM_ROLE, msg.sender);\\n        uint256 _fee = 0.05e4;\\n        fee = _fee;\\n        feeAddress = msg.sender;\\n        emit NewFee(_fee);\\n        emit NewFeeAddress(msg.sender);\\n    }\\n\\n    function depositBribe(\\n        address proposal,\\n        address token,\\n        uint256 amount\\n    ) external {\\n        require(proposalDeadlines[proposal] >= block.timestamp, \\\"VotemakBribe: Invalid proposal\\\");\\n        if (!_transferBribe(distributor, feeAddress, msg.sender, token, amount)) {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n        emit NewBribe(proposal, token, msg.sender, amount);\\n    }\\n\\n    function depositBribe(address proposal) external payable {\\n        require(proposalDeadlines[proposal] >= block.timestamp, \\\"VotemakBribe: Invalid proposal\\\");\\n        IWETH9(weth).deposit{ value: msg.value }();\\n        _transferBribe(distributor, feeAddress, address(0), weth, msg.value);\\n        emit NewBribe(proposal, weth, msg.sender, msg.value);\\n    }\\n\\n    function transferBribesToDistributor(address[] calldata tokens) external {\\n        address _distributor = distributor;\\n        address _feeAddress = feeAddress;\\n        require(_distributor != address(0), \\\"VotemakBribe: Invalid distributor\\\");\\n        require(_feeAddress != address(0), \\\"VotemakBribe: Invalid feeAddress\\\");\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _transferBribe(_distributor, _feeAddress, address(0), tokens[i], IERC20(tokens[i]).balanceOf(address(this)));\\n        }\\n    }\\n\\n    function updateProposals(address[] calldata proposals, uint256[] calldata deadlines) external onlyRole(TEAM_ROLE) {\\n        for (uint256 i = 0; i < proposals.length; i++) {\\n            require(deadlines[i] >= proposalDeadlines[proposals[i]], \\\"VotemakBribe: Invalid deadline\\\");\\n            proposalDeadlines[proposals[i]] = deadlines[i];\\n            emit NewProposal(proposals[i], deadlines[i]);\\n        }\\n    }\\n\\n    function setFee(uint256 newFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newFee < MAX_FEE, \\\"VotemakBribe: Invalid fee\\\");\\n        fee = newFee;\\n        emit NewFee(newFee);\\n    }\\n\\n    function setFeeAddress(address _feeAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        feeAddress = _feeAddress;\\n        emit NewFeeAddress(_feeAddress);\\n    }\\n\\n    function setDistributor(address _distributor) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        distributor = _distributor;\\n        emit NewDistributor(_distributor);\\n    }\\n\\n    function _transferBribe(\\n        address _distributor,\\n        address _feeAddress,\\n        address from,\\n        address token,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (_distributor != address(0) && _feeAddress != address(0) && amount > 0) {\\n            uint256 feeAmount = (amount * fee) / MAX_FEE;\\n            if (from == address(0)) {\\n                IERC20(token).safeTransfer(_distributor, amount - feeAmount);\\n                IERC20(token).safeTransfer(_feeAddress, feeAmount);\\n            } else {\\n                IERC20(token).safeTransferFrom(from, _distributor, amount - feeAmount);\\n                IERC20(token).safeTransferFrom(from, _feeAddress, feeAmount);\\n            }\\n            emit TransferredBribe(token, amount);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    event NewBribe(address indexed proposal, address indexed token, address indexed user, uint256 amount);\\n    event TransferredBribe(address indexed token, uint256 amount);\\n    event NewProposal(address indexed proposal, uint256 deadline);\\n    event NewFee(uint256 indexed fee);\\n    event NewFeeAddress(address indexed feeAddress);\\n    event NewDistributor(address indexed distributor);\\n}\\n\",\"keccak256\":\"0x759a3628f1120034f70c275e544e7212d7b928d100ddd2cd5f5c2052f9b32dbd\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x766292849985c733514f61abd16841f852de7d10d89a63f033391d9fa1a6b993\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001add38038062001add8339810160408190526200003491620001a7565b6001600160601b0319606082901b1660805262000053600033620000f7565b6200007f7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b3333620000f7565b6101f46001819055600280546001600160a01b0319163317905560405181907f63fe946ed58429ac3c5e64d4356ff92c26d7fa1e73586515df8ba9f059ab54a590600090a260405133907fdcff558177ef1322e1a9308bd0d2b8b3922d8e05c3ec06323297bdd24db93ef090600090a25050620001d7565b62000103828262000107565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000103576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001633390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600060208284031215620001b9578081fd5b81516001600160a01b0381168114620001d0578182fd5b9392505050565b60805160601c6118d26200020b6000396000818161023001528181610bd501528181610c630152610c9501526118d26000f3fe6080604052600436106101445760003560e01c80637c9bf695116100c0578063b118401811610074578063bfe1092811610059578063bfe10928146103c3578063d547741f146103e3578063ddca3f431461040357600080fd5b8063b118401814610383578063bd3cd549146103b057600080fd5b806391d14854116100a557806391d148541461030a578063a217fddf1461034e578063ab7d6eb91461036357600080fd5b80637c9bf695146102ca5780638705fcd4146102ea57600080fd5b80633a3238fc1161011757806341275358116100fc578063412753581461026a57806369fe0e2d1461028a57806375619ab5146102aa57600080fd5b80633a3238fc146101fe5780633fc8cef31461021e57600080fd5b806301ffc9a714610149578063248a9ca31461017e5780632f2ff15d146101bc57806336568abe146101de575b600080fd5b34801561015557600080fd5b506101696101643660046116d3565b610419565b60405190151581526020015b60405180910390f35b34801561018a57600080fd5b506101ae610199366004611690565b60009081526020819052604090206001015490565b604051908152602001610175565b3480156101c857600080fd5b506101dc6101d73660046116a8565b610450565b005b3480156101ea57600080fd5b506101dc6101f93660046116a8565b61047b565b34801561020a57600080fd5b506101dc6102193660046115c7565b61050c565b34801561022a57600080fd5b506102527f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610175565b34801561027657600080fd5b50600254610252906001600160a01b031681565b34801561029657600080fd5b506101dc6102a5366004611690565b6106e0565b3480156102b657600080fd5b506101dc6102c5366004611572565b610771565b3480156102d657600080fd5b506101dc6102e5366004611607565b6107d5565b3480156102f657600080fd5b506101dc610305366004611572565b610a0b565b34801561031657600080fd5b506101696103253660046116a8565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561035a57600080fd5b506101ae600081565b34801561036f57600080fd5b506101dc61037e36600461158c565b610a6f565b34801561038f57600080fd5b506101ae61039e366004611572565b60046020526000908152604090205481565b6101dc6103be366004611572565b610b6b565b3480156103cf57600080fd5b50600354610252906001600160a01b031681565b3480156103ef57600080fd5b506101dc6103fe3660046116a8565b610d03565b34801561040f57600080fd5b506101ae60015481565b60006001600160e01b03198216637965db0b60e01b148061044a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461046c8133610d29565b6104768383610da7565b505050565b6001600160a01b03811633146104fe5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6105088282610e45565b5050565b6003546002546001600160a01b039182169116816105765760405162461bcd60e51b815260206004820152602160248201527f566f74656d616b42726962653a20496e76616c6964206469737472696275746f6044820152603960f91b60648201526084016104f5565b6001600160a01b0381166105cc5760405162461bcd60e51b815260206004820181905260248201527f566f74656d616b42726962653a20496e76616c6964206665654164647265737360448201526064016104f5565b60005b838110156106d9576106c6838360008888868181106105fe57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906106139190611572565b89898781811061063357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906106489190611572565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561068957600080fd5b505afa15801561069d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c191906116fb565b610ec4565b50806106d181611894565b9150506105cf565b5050505050565b60006106ec8133610d29565b612710821061073d5760405162461bcd60e51b815260206004820152601960248201527f566f74656d616b42726962653a20496e76616c6964206665650000000000000060448201526064016104f5565b600182905560405182907f63fe946ed58429ac3c5e64d4356ff92c26d7fa1e73586515df8ba9f059ab54a590600090a25050565b600061077d8133610d29565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f26351e175ca0261735d5253c1386be151da58f10e7d60599db07cf0a412f2aa390600090a25050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b336108008133610d29565b60005b84811015610a03576004600087878481811061082f57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108449190611572565b6001600160a01b03166001600160a01b031681526020019081526020016000205484848381811061088557634e487b7160e01b600052603260045260246000fd5b9050602002013510156108da5760405162461bcd60e51b815260206004820152601e60248201527f566f74656d616b42726962653a20496e76616c696420646561646c696e65000060448201526064016104f5565b8383828181106108fa57634e487b7160e01b600052603260045260246000fd5b905060200201356004600088888581811061092557634e487b7160e01b600052603260045260246000fd5b905060200201602081019061093a9190611572565b6001600160a01b0316815260208101919091526040016000205585858281811061097457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109899190611572565b6001600160a01b03167f8dfa4a39b973cacc42c5d14d9461d66fd1fda5ea696f7d2a3c44fd9d7f11d04f8585848181106109d357634e487b7160e01b600052603260045260246000fd5b905060200201356040516109e991815260200190565b60405180910390a2806109fb81611894565b915050610803565b505050505050565b6000610a178133610d29565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517fdcff558177ef1322e1a9308bd0d2b8b3922d8e05c3ec06323297bdd24db93ef090600090a25050565b6001600160a01b038316600090815260046020526040902054421115610ad75760405162461bcd60e51b815260206004820152601e60248201527f566f74656d616b42726962653a20496e76616c69642070726f706f73616c000060448201526064016104f5565b600354600254610af6916001600160a01b039081169116338585610ec4565b610b0f57610b0f6001600160a01b038316333084610fec565b336001600160a01b0316826001600160a01b0316846001600160a01b03167f6afe75e34a735ce3f37f9c1601e99fe9898d2c385cc0acad813bf77943871dcf84604051610b5e91815260200190565b60405180910390a4505050565b6001600160a01b038116600090815260046020526040902054421115610bd35760405162461bcd60e51b815260206004820152601e60248201527f566f74656d616b42726962653a20496e76616c69642070726f706f73616c000060448201526064016104f5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610c2e57600080fd5b505af1158015610c42573d6000803e3d6000fd5b5050600354600254610c8894506001600160a01b03918216935016905060007f000000000000000000000000000000000000000000000000000000000000000034610ec4565b50336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03167f6afe75e34a735ce3f37f9c1601e99fe9898d2c385cc0acad813bf77943871dcf34604051610cf891815260200190565b60405180910390a450565b600082815260208190526040902060010154610d1f8133610d29565b6104768383610e45565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661050857610d65816001600160a01b03166014611072565b610d70836020611072565b604051602001610d8192919061172f565b60408051601f198184030181529082905262461bcd60e51b82526104f5916004016117b0565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610508576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e013390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610508576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006001600160a01b03861615801590610ee657506001600160a01b03851615155b8015610ef25750600082115b15610fdf57600061271060015484610f0a919061181b565b610f1491906117fb565b90506001600160a01b038516610f5c57610f4387610f32838661183a565b6001600160a01b0387169190611268565b610f576001600160a01b0385168783611268565b610f92565b610f7d8588610f6b848761183a565b6001600160a01b038816929190610fec565b610f926001600160a01b038516868884610fec565b836001600160a01b03167f7bd7b99b464a37dcf9656b82953f8c05e2544634a6507aecabe84980dac52e4184604051610fcd91815260200190565b60405180910390a26001915050610fe3565b5060005b95945050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261106c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611298565b50505050565b6060600061108183600261181b565b61108c9060026117e3565b67ffffffffffffffff8111156110b257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110dc576020820181803683370190505b509050600360fc1b8160008151811061110557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061114257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061116684600261181b565b6111719060016117e3565b90505b6001811115611212577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106111c057634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106111e457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361120b8161187d565b9050611174565b5083156112615760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104f5565b9392505050565b6040516001600160a01b03831660248201526044810182905261047690849063a9059cbb60e01b90606401611020565b60006112ed826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661137d9092919063ffffffff16565b805190915015610476578080602001905181019061130b9190611670565b6104765760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104f5565b606061138c8484600085611394565b949350505050565b60608247101561140c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104f5565b843b61145a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f5565b600080866001600160a01b031685876040516114769190611713565b60006040518083038185875af1925050503d80600081146114b3576040519150601f19603f3d011682016040523d82523d6000602084013e6114b8565b606091505b50915091506114c88282866114d3565b979650505050505050565b606083156114e2575081611261565b8251156114f25782518084602001fd5b8160405162461bcd60e51b81526004016104f591906117b0565b80356001600160a01b038116811461152357600080fd5b919050565b60008083601f840112611539578182fd5b50813567ffffffffffffffff811115611550578182fd5b6020830191508360208260051b850101111561156b57600080fd5b9250929050565b600060208284031215611583578081fd5b6112618261150c565b6000806000606084860312156115a0578182fd5b6115a98461150c565b92506115b76020850161150c565b9150604084013590509250925092565b600080602083850312156115d9578182fd5b823567ffffffffffffffff8111156115ef578283fd5b6115fb85828601611528565b90969095509350505050565b6000806000806040858703121561161c578081fd5b843567ffffffffffffffff80821115611633578283fd5b61163f88838901611528565b90965094506020870135915080821115611657578283fd5b5061166487828801611528565b95989497509550505050565b600060208284031215611681578081fd5b81518015158114611261578182fd5b6000602082840312156116a1578081fd5b5035919050565b600080604083850312156116ba578182fd5b823591506116ca6020840161150c565b90509250929050565b6000602082840312156116e4578081fd5b81356001600160e01b031981168114611261578182fd5b60006020828403121561170c578081fd5b5051919050565b60008251611725818460208701611851565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611767816017850160208801611851565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516117a4816028840160208801611851565b01602801949350505050565b60208152600082518060208401526117cf816040850160208701611851565b601f01601f19169190910160400192915050565b600082198211156117f6576117f66118af565b500190565b60008261181657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611835576118356118af565b500290565b60008282101561184c5761184c6118af565b500390565b60005b8381101561186c578181015183820152602001611854565b8381111561106c5750506000910152565b60008161188c5761188c6118af565b506000190190565b60006000198214156118a8576118a86118af565b5060010190565b634e487b7160e01b600052601160045260246000fdfea164736f6c6343000804000a",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c80637c9bf695116100c0578063b118401811610074578063bfe1092811610059578063bfe10928146103c3578063d547741f146103e3578063ddca3f431461040357600080fd5b8063b118401814610383578063bd3cd549146103b057600080fd5b806391d14854116100a557806391d148541461030a578063a217fddf1461034e578063ab7d6eb91461036357600080fd5b80637c9bf695146102ca5780638705fcd4146102ea57600080fd5b80633a3238fc1161011757806341275358116100fc578063412753581461026a57806369fe0e2d1461028a57806375619ab5146102aa57600080fd5b80633a3238fc146101fe5780633fc8cef31461021e57600080fd5b806301ffc9a714610149578063248a9ca31461017e5780632f2ff15d146101bc57806336568abe146101de575b600080fd5b34801561015557600080fd5b506101696101643660046116d3565b610419565b60405190151581526020015b60405180910390f35b34801561018a57600080fd5b506101ae610199366004611690565b60009081526020819052604090206001015490565b604051908152602001610175565b3480156101c857600080fd5b506101dc6101d73660046116a8565b610450565b005b3480156101ea57600080fd5b506101dc6101f93660046116a8565b61047b565b34801561020a57600080fd5b506101dc6102193660046115c7565b61050c565b34801561022a57600080fd5b506102527f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610175565b34801561027657600080fd5b50600254610252906001600160a01b031681565b34801561029657600080fd5b506101dc6102a5366004611690565b6106e0565b3480156102b657600080fd5b506101dc6102c5366004611572565b610771565b3480156102d657600080fd5b506101dc6102e5366004611607565b6107d5565b3480156102f657600080fd5b506101dc610305366004611572565b610a0b565b34801561031657600080fd5b506101696103253660046116a8565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561035a57600080fd5b506101ae600081565b34801561036f57600080fd5b506101dc61037e36600461158c565b610a6f565b34801561038f57600080fd5b506101ae61039e366004611572565b60046020526000908152604090205481565b6101dc6103be366004611572565b610b6b565b3480156103cf57600080fd5b50600354610252906001600160a01b031681565b3480156103ef57600080fd5b506101dc6103fe3660046116a8565b610d03565b34801561040f57600080fd5b506101ae60015481565b60006001600160e01b03198216637965db0b60e01b148061044a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461046c8133610d29565b6104768383610da7565b505050565b6001600160a01b03811633146104fe5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6105088282610e45565b5050565b6003546002546001600160a01b039182169116816105765760405162461bcd60e51b815260206004820152602160248201527f566f74656d616b42726962653a20496e76616c6964206469737472696275746f6044820152603960f91b60648201526084016104f5565b6001600160a01b0381166105cc5760405162461bcd60e51b815260206004820181905260248201527f566f74656d616b42726962653a20496e76616c6964206665654164647265737360448201526064016104f5565b60005b838110156106d9576106c6838360008888868181106105fe57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906106139190611572565b89898781811061063357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906106489190611572565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561068957600080fd5b505afa15801561069d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c191906116fb565b610ec4565b50806106d181611894565b9150506105cf565b5050505050565b60006106ec8133610d29565b612710821061073d5760405162461bcd60e51b815260206004820152601960248201527f566f74656d616b42726962653a20496e76616c6964206665650000000000000060448201526064016104f5565b600182905560405182907f63fe946ed58429ac3c5e64d4356ff92c26d7fa1e73586515df8ba9f059ab54a590600090a25050565b600061077d8133610d29565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f26351e175ca0261735d5253c1386be151da58f10e7d60599db07cf0a412f2aa390600090a25050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b336108008133610d29565b60005b84811015610a03576004600087878481811061082f57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108449190611572565b6001600160a01b03166001600160a01b031681526020019081526020016000205484848381811061088557634e487b7160e01b600052603260045260246000fd5b9050602002013510156108da5760405162461bcd60e51b815260206004820152601e60248201527f566f74656d616b42726962653a20496e76616c696420646561646c696e65000060448201526064016104f5565b8383828181106108fa57634e487b7160e01b600052603260045260246000fd5b905060200201356004600088888581811061092557634e487b7160e01b600052603260045260246000fd5b905060200201602081019061093a9190611572565b6001600160a01b0316815260208101919091526040016000205585858281811061097457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109899190611572565b6001600160a01b03167f8dfa4a39b973cacc42c5d14d9461d66fd1fda5ea696f7d2a3c44fd9d7f11d04f8585848181106109d357634e487b7160e01b600052603260045260246000fd5b905060200201356040516109e991815260200190565b60405180910390a2806109fb81611894565b915050610803565b505050505050565b6000610a178133610d29565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517fdcff558177ef1322e1a9308bd0d2b8b3922d8e05c3ec06323297bdd24db93ef090600090a25050565b6001600160a01b038316600090815260046020526040902054421115610ad75760405162461bcd60e51b815260206004820152601e60248201527f566f74656d616b42726962653a20496e76616c69642070726f706f73616c000060448201526064016104f5565b600354600254610af6916001600160a01b039081169116338585610ec4565b610b0f57610b0f6001600160a01b038316333084610fec565b336001600160a01b0316826001600160a01b0316846001600160a01b03167f6afe75e34a735ce3f37f9c1601e99fe9898d2c385cc0acad813bf77943871dcf84604051610b5e91815260200190565b60405180910390a4505050565b6001600160a01b038116600090815260046020526040902054421115610bd35760405162461bcd60e51b815260206004820152601e60248201527f566f74656d616b42726962653a20496e76616c69642070726f706f73616c000060448201526064016104f5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610c2e57600080fd5b505af1158015610c42573d6000803e3d6000fd5b5050600354600254610c8894506001600160a01b03918216935016905060007f000000000000000000000000000000000000000000000000000000000000000034610ec4565b50336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03167f6afe75e34a735ce3f37f9c1601e99fe9898d2c385cc0acad813bf77943871dcf34604051610cf891815260200190565b60405180910390a450565b600082815260208190526040902060010154610d1f8133610d29565b6104768383610e45565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661050857610d65816001600160a01b03166014611072565b610d70836020611072565b604051602001610d8192919061172f565b60408051601f198184030181529082905262461bcd60e51b82526104f5916004016117b0565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610508576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e013390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610508576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006001600160a01b03861615801590610ee657506001600160a01b03851615155b8015610ef25750600082115b15610fdf57600061271060015484610f0a919061181b565b610f1491906117fb565b90506001600160a01b038516610f5c57610f4387610f32838661183a565b6001600160a01b0387169190611268565b610f576001600160a01b0385168783611268565b610f92565b610f7d8588610f6b848761183a565b6001600160a01b038816929190610fec565b610f926001600160a01b038516868884610fec565b836001600160a01b03167f7bd7b99b464a37dcf9656b82953f8c05e2544634a6507aecabe84980dac52e4184604051610fcd91815260200190565b60405180910390a26001915050610fe3565b5060005b95945050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261106c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611298565b50505050565b6060600061108183600261181b565b61108c9060026117e3565b67ffffffffffffffff8111156110b257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110dc576020820181803683370190505b509050600360fc1b8160008151811061110557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061114257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061116684600261181b565b6111719060016117e3565b90505b6001811115611212577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106111c057634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106111e457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361120b8161187d565b9050611174565b5083156112615760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104f5565b9392505050565b6040516001600160a01b03831660248201526044810182905261047690849063a9059cbb60e01b90606401611020565b60006112ed826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661137d9092919063ffffffff16565b805190915015610476578080602001905181019061130b9190611670565b6104765760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104f5565b606061138c8484600085611394565b949350505050565b60608247101561140c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104f5565b843b61145a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f5565b600080866001600160a01b031685876040516114769190611713565b60006040518083038185875af1925050503d80600081146114b3576040519150601f19603f3d011682016040523d82523d6000602084013e6114b8565b606091505b50915091506114c88282866114d3565b979650505050505050565b606083156114e2575081611261565b8251156114f25782518084602001fd5b8160405162461bcd60e51b81526004016104f591906117b0565b80356001600160a01b038116811461152357600080fd5b919050565b60008083601f840112611539578182fd5b50813567ffffffffffffffff811115611550578182fd5b6020830191508360208260051b850101111561156b57600080fd5b9250929050565b600060208284031215611583578081fd5b6112618261150c565b6000806000606084860312156115a0578182fd5b6115a98461150c565b92506115b76020850161150c565b9150604084013590509250925092565b600080602083850312156115d9578182fd5b823567ffffffffffffffff8111156115ef578283fd5b6115fb85828601611528565b90969095509350505050565b6000806000806040858703121561161c578081fd5b843567ffffffffffffffff80821115611633578283fd5b61163f88838901611528565b90965094506020870135915080821115611657578283fd5b5061166487828801611528565b95989497509550505050565b600060208284031215611681578081fd5b81518015158114611261578182fd5b6000602082840312156116a1578081fd5b5035919050565b600080604083850312156116ba578182fd5b823591506116ca6020840161150c565b90509250929050565b6000602082840312156116e4578081fd5b81356001600160e01b031981168114611261578182fd5b60006020828403121561170c578081fd5b5051919050565b60008251611725818460208701611851565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611767816017850160208801611851565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516117a4816028840160208801611851565b01602801949350505050565b60208152600082518060208401526117cf816040850160208701611851565b601f01601f19169190910160400192915050565b600082198211156117f6576117f66118af565b500190565b60008261181657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611835576118356118af565b500290565b60008282101561184c5761184c6118af565b500390565b60005b8381101561186c578181015183820152602001611854565b8381111561106c5750506000910152565b60008161188c5761188c6118af565b506000190190565b60006000198214156118a8576118a86118af565b5060010190565b634e487b7160e01b600052601160045260246000fdfea164736f6c6343000804000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/VotemakBribe.sol:VotemakBribe",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2342,
        "contract": "contracts/VotemakBribe.sol:VotemakBribe",
        "label": "fee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2344,
        "contract": "contracts/VotemakBribe.sol:VotemakBribe",
        "label": "feeAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2346,
        "contract": "contracts/VotemakBribe.sol:VotemakBribe",
        "label": "distributor",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2350,
        "contract": "contracts/VotemakBribe.sol:VotemakBribe",
        "label": "proposalDeadlines",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/VotemakBribe.sol:VotemakBribe",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/VotemakBribe.sol:VotemakBribe",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
